<?phpclass Mongo_db {    private $CI;    private $config_file = 'mongo_db';    private $connection;    private $db;    private $connection_string;    private $host;    private $port;    private $user;    private $pass;    private $dbname;    private $persist;    private $persist_key;    private $selects = array();    private $wheres = array();    private $sorts = array();    private $limit = 999999;    private $offset = 0;    public function __construct() {        if (!class_exists('Mongo')):            show_error("The MongoDB PECL extension has not been installed or enabled", 500);        endif;        $this->CI = & get_instance();        $this->connection_string();        $this->connect();    }    public function getDb() {        return $this->db;    }    public function switch_db($database = '') {        if (empty($database)):            show_error("To switch MongoDB databases, a new database name must be specified", 500);        endif;        $this->dbname = $database;        try {            $this->db = $this->connection->{$this->dbname};            return(TRUE);        } catch (Exception $e) {            show_error("Unable to switch Mongo Databases: {$e->getMessage()}", 500);        }    }    public function select($includes = array(), $excludes = array()) {        if (!is_array($includes))            $includes = array();        if (!is_array($excludes))            $excludes = array();        if (!empty($includes)):            foreach ($includes as $col):                $this->selects[$col] = 1;            endforeach;        else:            foreach ($excludes as $col):                $this->selects[$col] = 0;            endforeach;        endif;        return($this);    }    public function add_where($wheres = array()) {		$this->wheres = array_merge($wheres, $this->wheres);        return($this);    }    public function where($wheres = array()) {        foreach ($wheres as $wh => $val):            $this->wheres[$wh] = $val;        endforeach;        return($this);    }    public function where_in($field = "", $in = array()) {        $this->where_init($field);        $this->wheres[$field]['$in'] = $in;        return($this);    }    public function where_not_in($field = "", $in = array()) {        $this->where_init($field);        $this->wheres[$field]['$nin'] = $in;        return($this);    }    public function where_gt($field = "", $x) {        $this->where_init($field);        $this->wheres[$field]['$gt'] = $x;        return($this);    }    public function where_gte($field = "", $x) {        $this->where_init($field);        $this->wheres[$field]['$gte'] = $x;        return($this);    }    public function where_lt($field = "", $x) {        $this->where_init($field);        $this->wheres[$field]['$lt'] = $x;        return($this);    }    public function where_lte($field = "", $x) {        $this->where_init($field);        $this->wheres[$field]['$lte'] = $x;        return($this);    }    public function where_between($field = "", $x, $y) {        $this->where_init($field);        $this->wheres[$field]['$gte'] = $x;        $this->wheres[$field]['$lte'] = $y;        return($this);    }    public function where_between_ne($field = "", $x, $y) {        $this->where_init($field);        $this->wheres[$field]['$gt'] = $x;        $this->wheres[$field]['$lt'] = $y;        return($this);    }    public function where_ne($field = "", $x) {        $this->where_init($field);        $this->wheres[$field]['$ne'] = $x;        return($this);    }    public function like($field = "", $value = "", $flags = "i", $enable_start_wildcard = TRUE, $enable_end_wildcard = TRUE) {        $field = (string) trim($field);        $this->where_init($field);        $value = (string) trim($value);        $value = quotemeta($value);        if ($enable_start_wildcard !== TRUE):            $value = "^" . $value;        endif;        if ($enable_end_wildcard !== TRUE):            $value .= "$";        endif;        $regex = "/$value/$flags";        $this->wheres[$field] = new MongoRegex($regex);        return($this);    }    public function order_by($fields = array()) {        foreach ($fields as $col => $val):            if ($val == -1 || $val === FALSE || strtolower($val) == 'desc'):                $this->sorts[$col] = -1;            else:                $this->sorts[$col] = 1;            endif;        endforeach;        return($this);    }    public function limit($x = 99999) {        if ($x !== NULL && is_numeric($x) && $x >= 1)            $this->limit = (int) $x;        return($this);    }    public function offset($x = 0) {        if ($x !== NULL && is_numeric($x) && $x >= 1)            $this->offset = (int) $x;        return($this);    }    public function get_where($collection = "", $where = array(), $limit = 99999) {        return($this->where($where)->limit($limit)->get($collection));    }    public function get($collection = "") {        if (empty($collection))            show_error("In order to retreive documents from MongoDB, a collection name must be passed", 500);        $results = array();        $documents = $this->db->{$collection}->find($this->wheres, $this->selects)->limit((int) $this->limit)->skip((int) $this->offset)->sort($this->sorts);        $returns = array();        foreach ($documents as $doc):            $returns[] = $doc;        endforeach;        return($returns);//return(iterator_to_array($documents));    }    public function count($collection = "") {        if (empty($collection))            show_error("In order to retreive a count of documents from MongoDB, a collection name must be passed", 500);        $count = $this->db->{$collection}->find($this->wheres)->limit((int) $this->limit)->skip((int) $this->offset)->count();        $this->clear();        return($count);    }    public function insert($collection = "", $data = array()) {        if (empty($collection))            show_error("No Mongo collection selected to insert into", 500);        if (count($data) == 0 || !is_array($data))            show_error("Nothing to insert into Mongo collection or insert is not an array", 500);        try {            $this->db->{$collection}->insert($data, array('safe' => TRUE));            if (isset($insert['_id']))                return($insert['_id']);            else                return(FALSE);        } catch (MongoCursorException $e) {            show_error("Insert of data into MongoDB failed: {$e->getMessage()}", 500);        }    }    public function update($collection = "", $data = array()) {        if (empty($collection))            show_error("No Mongo collection selected to update", 500);        if (count($data) == 0 || !is_array($data))            show_error("Nothing to update in Mongo collection or update is not an array", 500);        try {            $this->db->{$collection}->update($this->wheres, array('$set' => $data), array('safe' => TRUE, 'multiple' => FALSE));            return(TRUE);        } catch (MongoCursorException $e) {            show_error("Update of data into MongoDB failed: {$e->getMessage()}", 500);        }    }    public function update_all($collection = "", $data = array()) {        if (empty($collection))            show_error("No Mongo collection selected to update", 500);        if (count($data) == 0 || !is_array($data))            show_error("Nothing to update in Mongo collection or update is not an array", 500);        try {            $this->db->{$collection}->update($this->wheres, array('$set' => $data), array('safe' => TRUE, 'multiple' => TRUE));            return(TRUE);        } catch (MongoCursorException $e) {            show_error("Update of data into MongoDB failed: {$e->getMessage()}", 500);        }    }    public function delete($collection = "") {        if (empty($collection))            show_error("No Mongo collection selected to delete from", 500);        try {            $this->db->{$collection}->remove($this->wheres, array('safe' => TRUE, 'justOne' => TRUE));            return(TRUE);        } catch (MongoCursorException $e) {            show_error("Delete of data into MongoDB failed: {$e->getMessage()}", 500);        }    }    public function delete_all($collection = "") {        if (empty($collection))            show_error("No Mongo collection selected to delete from", 500);        try {            $this->db->{$collection}->remove($this->wheres, array('safe' => TRUE, 'justOne' => FALSE));            return(TRUE);        } catch (MongoCursorException $e) {            show_error("Delete of data into MongoDB failed: {$e->getMessage()}", 500);        }    }    public function add_index($collection = "", $keys = array(), $options = array()) {        if (empty($collection))            show_error("No Mongo collection specified to add index to", 500);        if (empty($keys) || !is_array($keys))            show_error("Index could not be created to MongoDB Collection because no keys were specified", 500);        foreach ($keys as $col => $val):            if ($val == -1 || $val === FALSE || strtolower($val) == 'desc'):                $keys[$col] = -1;            else:                $keys[$col] = 1;            endif;        endforeach;        if ($this->db->{$collection}->ensureIndex($keys, $options) == TRUE):            $this->clear();            return($this);        else:            show_error("An error occured when trying to add an index to MongoDB Collection", 500);        endif;    }    public function remove_index($collection = "", $keys = array()) {        if (empty($collection))            show_error("No Mongo collection specified to remove index from", 500);        if (empty($keys) || !is_array($keys))            show_error("Index could not be removed from MongoDB Collection because no keys were specified", 500);        if ($this->db->{$collection}->deleteIndex($keys, $options) == TRUE):            $this->clear();            return($this);        else:            show_error("An error occured when trying to remove an index from MongoDB Collection", 500);        endif;    }    public function remove_all_indexes($collection = "") {        if (empty($collection))            show_error("No Mongo collection specified to remove all indexes from", 500);        $this->db->{$collection}->deleteIndexes();        $this->clear();        return($this);    }    public function list_indexes($collection = "") {        if (empty($collection))            show_error("No Mongo collection specified to remove all indexes from", 500);        return($this->db->{$collection}->getIndexInfo());    }    private function connect() {        $options = array();        if ($this->persist === TRUE):            $options['persist'] = isset($this->persist_key) && !empty($this->persist_key) ? $this->persist_key : 'ci_mongo_persist';        endif;        try {            $this->connection = new Mongo($this->connection_string, $options);            $this->db = $this->connection->{$this->dbname};            return($this);        } catch (MongoConnectionException $e) {            show_error("Unable to connect to MongoDB: {$e->getMessage()}", 500);        }    }    private function connection_string() {        $this->CI->config->load($this->config_file);        $this->host = trim($this->CI->config->item('mongo_host'));        $this->port = trim($this->CI->config->item('mongo_port'));        $this->user = trim($this->CI->config->item('mongo_user'));        $this->pass = trim($this->CI->config->item('mongo_pass'));        $this->dbname = trim($this->CI->config->item('mongo_db'));        $this->persist = trim($this->CI->config->item('mongo_persist'));        $this->persist_key = trim($this->CI->config->item('mongo_persist_key'));        $connection_string = "mongodb://";        if (empty($this->host)):            show_error("The Host must be set to connect to MongoDB", 500);        endif;        if (empty($this->dbname)):            show_error("The Database must be set to connect to MongoDB", 500);        endif;        if (!empty($this->user) && !empty($this->pass)):            $connection_string .= "{$this->user}:{$this->pass}@";        endif;        if (isset($this->port) && !empty($this->port)):            $connection_string .= "{$this->host}:{$this->port}";        else:            $connection_string .= "{$this->host}";        endif;        $this->connection_string = trim($connection_string);    }    private function clear() {        $this->selects = array();        $this->wheres = array();        $this->limit = NULL;        $this->offset = NULL;        $this->sorts = array();    }    private function where_init($param) {        if (!isset($this->wheres[$param]))            $this->wheres[$param] = array();    }}